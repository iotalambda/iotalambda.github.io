1:HL["/_next/static/media/3d9ea938b6afa941-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/media/7eaa4a2482b4df1a-s.p.woff2",{"as":"font","type":"font/woff2"}]
3:HL["/_next/static/css/488301a2e2aae266.css",{"as":"style"}]
0:["pOqyhynUi3dv4a-kveJeb",[[["",{"children":[["id","2023/08/30/Microsoft-IdentityModel-logs-Errors-without-asking","c"],{"children":["__PAGE__?{\"id\":[\"2023\",\"08\",\"30\",\"Microsoft-IdentityModel-logs-Errors-without-asking\"]}",{}]}]},"$undefined","$undefined",true],"$L4",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/488301a2e2aae266.css","precedence":"next"}]],"$L5"]]]]
6:HL["/_next/static/css/301e7291452e98cd.css",{"as":"style"}]
7:I{"id":6685,"chunks":["685:static/chunks/685-a8c11ad368fada34.js","185:static/chunks/app/layout-0afbb0e01943be7f.js"],"name":"","async":false}
8:I{"id":7767,"chunks":["272:static/chunks/webpack-b2aba447c1dc2205.js","971:static/chunks/fd9d1056-a99b58d3cc150217.js","596:static/chunks/596-9d43875837bd0b65.js"],"name":"default","async":false}
9:I{"id":7920,"chunks":["272:static/chunks/webpack-b2aba447c1dc2205.js","971:static/chunks/fd9d1056-a99b58d3cc150217.js","596:static/chunks/596-9d43875837bd0b65.js"],"name":"default","async":false}
4:[null,["$","html",null,{"lang":"en","className":"__variable_965427 __variable_9c011f","children":["$","body",null,{"className":"bg-slate-200 dark:bg-slate-700","children":[["$","nav",null,{"className":"w-full flex flex-row justify-between bg-indigo-600 shadow-indigo-300 dark:shadow-indigo-800 shadow-2xl font-sans","children":["$","div",null,{"className":"p-2","children":["$","$L7",null,{"className":"text-2xl font-semibold text-neutral-100 dark:text-neutral-200","href":"/","children":[["$","h1",null,{"className":"inline","children":"üçî food for ai"}]," ",["$","span",null,{"className":"font-mono font-light text-xs","children":"food.joona.cloud"}]]}]}]}],["$","main",null,{"className":"mt-4","children":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children",["id","2023/08/30/Microsoft-IdentityModel-logs-Errors-without-asking","c"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$La","$Lb",null],"segment":"__PAGE__?{\"id\":[\"2023\",\"08\",\"30\",\"Microsoft-IdentityModel-logs-Errors-without-asking\"]}"},"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/301e7291452e98cd.css","precedence":"next"}]]}],"segment":["id","2023/08/30/Microsoft-IdentityModel-logs-Errors-without-asking","c"]},"styles":[]}]}]]}]}],null]
5:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Microsoft.Identity logs Errors without asking | Food for AI blog"}],["$","meta","2",{"name":"description","content":"Blog about .NET, Azure, React and whatever comes to mind."}],["$","meta","3",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","meta","5",{"name":"next-size-adjust"}]]
c:Ta464,<p><code>AddMicrosoftIdentityWebApi</code> from <code>Microsoft.Identity.Web</code> registers a bunch of services needed in authenticating incoming API requests with Azure AD. The choice of services is biased, and it turns out that the choice of log severity levels is also biased, which almost gave me false positive alerts in one of my projects. As of today, the severity is not configurable using options or configuration builders.</p>
<p>By default, if you invoke a request with a rubbish access token, there will be log entries created with <code>error</code> severity level out-of-box, which may not be what you want. For example:</p>
<p><code>Microsoft.IdentityModel.LoggingExtensions.IdentityLoggerAdapter: Error: IDX10634: Unable to create the SignatureProvider. Algorithm: 'HS256', SecurityKey: '[PII of type 'Microsoft.IdentityModel.Tokens.RsaSecurityKey' is hidden. For more details, see https://aka.ms/IdentityModel/PII.]' is not supported. The list of supported algorithms is available here: https://aka.ms/IdentityModel/supported-algorithms</code></p>
<p>We could simply exclude the log category <code>Microsoft.IdentityModel.LoggingExtensions.IdentityLoggingAdapter</code>, but we may not want that either, because some of the errors may be true positives and not just bots hammering the API. We'd just prefer to decrease the severity to <code>warning</code>, but there does not seem to be a way to achieve that with the default dotnet logging features.</p>
<h2 id="deep-dive"><a href="#deep-dive">Deep dive</a></h2>
<p><code>AddMicrosoftIdentityWebApi</code> invokes a private method <code>AddMicrosoftIdentityWebApiImplementation</code>, which invokes an util method <code>MicrosoftIdentityBaseAuthenticationBuilder.SetIdentityModelLogger(...)</code> in a <code>configureOptions</code> delegate:</p>
<div data-rehype-pretty-code-fragment=""><pre data-language="csharp" data-theme="light"><code data-language="csharp" data-theme="light"><span class="line"><span style="color: #6A737D">// Microsoft.Identity.Web.dll</span></span>
<span class="line"><span style="color: #D73A49">namespace</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Microsoft</span><span style="color: #24292E">.</span><span style="color: #6F42C1">Identity</span><span style="color: #24292E">.</span><span style="color: #6F42C1">Web</span></span>
<span class="line"><span style="color: #24292E">{</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">public</span><span style="color: #24292E"> </span><span style="color: #D73A49">static</span><span style="color: #24292E"> </span><span style="color: #D73A49">partial</span><span style="color: #24292E"> </span><span style="color: #D73A49">class</span><span style="color: #24292E"> </span><span style="color: #6F42C1">MicrosoftIdentityWebApiAuthenticationBuilderExtensions</span></span>
<span class="line"><span style="color: #24292E">    {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6A737D">// ...</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">private</span><span style="color: #24292E"> </span><span style="color: #D73A49">static</span><span style="color: #24292E"> </span><span style="color: #D73A49">void</span><span style="color: #24292E"> </span><span style="color: #6F42C1">AddMicrosoftIdentityWebApiImplementation</span><span style="color: #24292E">(</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #6F42C1">AuthenticationBuilder</span><span style="color: #24292E"> </span><span style="color: #6F42C1">builder</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #6F42C1">Action</span><span style="color: #24292E">&#x3C;</span><span style="color: #6F42C1">JwtBearerOptions</span><span style="color: #24292E">> </span><span style="color: #6F42C1">configureJwtBearerOptions</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #6F42C1">Action</span><span style="color: #24292E">&#x3C;</span><span style="color: #6F42C1">MicrosoftIdentityOptions</span><span style="color: #24292E">> </span><span style="color: #6F42C1">configureMicrosoftIdentityOptions</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">string</span><span style="color: #24292E"> </span><span style="color: #6F42C1">jwtBearerScheme</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">bool</span><span style="color: #24292E"> </span><span style="color: #6F42C1">subscribeToJwtBearerMiddlewareDiagnosticsEvents</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">        {</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #6A737D">// ...</span></span>
<span class="line"><span style="color: #24292E">            builder.Services.</span><span style="color: #6F42C1">AddOptions</span><span style="color: #24292E">&#x3C;</span><span style="color: #6F42C1">JwtBearerOptions</span><span style="color: #24292E">>(jwtBearerScheme)</span></span>
<span class="line"><span style="color: #24292E">                .</span><span style="color: #6F42C1">Configure</span><span style="color: #24292E">&#x3C;</span><span style="color: #6F42C1">IServiceProvider</span><span style="color: #24292E">, </span><span style="color: #6F42C1">IMergedOptionsStore</span><span style="color: #24292E">, </span><span style="color: #6F42C1">IOptionsMonitor</span><span style="color: #24292E">&#x3C;</span><span style="color: #6F42C1">MicrosoftIdentityOptions</span><span style="color: #24292E">>, </span><span style="color: #6F42C1">IOptions</span><span style="color: #24292E">&#x3C;</span><span style="color: #6F42C1">MicrosoftIdentityOptions</span><span style="color: #24292E">>>((</span></span>
<span class="line"><span style="color: #24292E">                    options,</span></span>
<span class="line"><span style="color: #24292E">                    serviceProvider,</span></span>
<span class="line"><span style="color: #24292E">                    mergedOptionsMonitor,</span></span>
<span class="line"><span style="color: #24292E">                    msIdOptionsMonitor,</span></span>
<span class="line"><span style="color: #24292E">                    msIdOptions) </span><span style="color: #D73A49">=></span></span>
<span class="line"><span style="color: #24292E">                {</span></span>
<span class="line"><span style="color: #24292E">                    </span><span style="color: #6A737D">// ...</span></span>
<span class="line"><span style="color: #24292E">                    MicrosoftIdentityBaseAuthenticationBuilder.</span><span style="color: #6F42C1">SetIdentityModelLogger</span><span style="color: #24292E">(serviceProvider);</span></span>
<span class="line"><span style="color: #24292E">                    </span><span style="color: #6A737D">// ...</span></span>
<span class="line"><span style="color: #24292E">                });</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #6A737D">// ...</span></span>
<span class="line"><span style="color: #24292E">        }</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre><pre data-language="csharp" data-theme="dark"><code data-language="csharp" data-theme="dark"><span class="line"><span style="color: #6A737D">// Microsoft.Identity.Web.dll</span></span>
<span class="line"><span style="color: #F97583">namespace</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">Microsoft</span><span style="color: #E1E4E8">.</span><span style="color: #B392F0">Identity</span><span style="color: #E1E4E8">.</span><span style="color: #B392F0">Web</span></span>
<span class="line"><span style="color: #E1E4E8">{</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">public</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">static</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">partial</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">class</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">MicrosoftIdentityWebApiAuthenticationBuilderExtensions</span></span>
<span class="line"><span style="color: #E1E4E8">    {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #6A737D">// ...</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">private</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">static</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">void</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">AddMicrosoftIdentityWebApiImplementation</span><span style="color: #E1E4E8">(</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #B392F0">AuthenticationBuilder</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">builder</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #B392F0">Action</span><span style="color: #E1E4E8">&#x3C;</span><span style="color: #B392F0">JwtBearerOptions</span><span style="color: #E1E4E8">> </span><span style="color: #B392F0">configureJwtBearerOptions</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #B392F0">Action</span><span style="color: #E1E4E8">&#x3C;</span><span style="color: #B392F0">MicrosoftIdentityOptions</span><span style="color: #E1E4E8">> </span><span style="color: #B392F0">configureMicrosoftIdentityOptions</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">string</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">jwtBearerScheme</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">bool</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">subscribeToJwtBearerMiddlewareDiagnosticsEvents</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">        {</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #6A737D">// ...</span></span>
<span class="line"><span style="color: #E1E4E8">            builder.Services.</span><span style="color: #B392F0">AddOptions</span><span style="color: #E1E4E8">&#x3C;</span><span style="color: #B392F0">JwtBearerOptions</span><span style="color: #E1E4E8">>(jwtBearerScheme)</span></span>
<span class="line"><span style="color: #E1E4E8">                .</span><span style="color: #B392F0">Configure</span><span style="color: #E1E4E8">&#x3C;</span><span style="color: #B392F0">IServiceProvider</span><span style="color: #E1E4E8">, </span><span style="color: #B392F0">IMergedOptionsStore</span><span style="color: #E1E4E8">, </span><span style="color: #B392F0">IOptionsMonitor</span><span style="color: #E1E4E8">&#x3C;</span><span style="color: #B392F0">MicrosoftIdentityOptions</span><span style="color: #E1E4E8">>, </span><span style="color: #B392F0">IOptions</span><span style="color: #E1E4E8">&#x3C;</span><span style="color: #B392F0">MicrosoftIdentityOptions</span><span style="color: #E1E4E8">>>((</span></span>
<span class="line"><span style="color: #E1E4E8">                    options,</span></span>
<span class="line"><span style="color: #E1E4E8">                    serviceProvider,</span></span>
<span class="line"><span style="color: #E1E4E8">                    mergedOptionsMonitor,</span></span>
<span class="line"><span style="color: #E1E4E8">                    msIdOptionsMonitor,</span></span>
<span class="line"><span style="color: #E1E4E8">                    msIdOptions) </span><span style="color: #F97583">=></span></span>
<span class="line"><span style="color: #E1E4E8">                {</span></span>
<span class="line"><span style="color: #E1E4E8">                    </span><span style="color: #6A737D">// ...</span></span>
<span class="line"><span style="color: #E1E4E8">                    MicrosoftIdentityBaseAuthenticationBuilder.</span><span style="color: #B392F0">SetIdentityModelLogger</span><span style="color: #E1E4E8">(serviceProvider);</span></span>
<span class="line"><span style="color: #E1E4E8">                    </span><span style="color: #6A737D">// ...</span></span>
<span class="line"><span style="color: #E1E4E8">                });</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #6A737D">// ...</span></span>
<span class="line"><span style="color: #E1E4E8">        }</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre></div>
<p>This means that <code>MicrosoftIdentityBaseAuthenticationBuilder.SetIdentityModelLogger(...)</code> is called during runtime and not startup.</p>
<p>On the other hand, <code>MicrosoftIdentityBaseAuthenticationBuilder.SetIdentityModelLogger</code> looks like this:</p>
<div data-rehype-pretty-code-fragment=""><pre data-language="csharp" data-theme="light"><code data-language="csharp" data-theme="light"><span class="line"><span style="color: #6A737D">// Microsoft.Identity.Web.dll</span></span>
<span class="line"><span style="color: #D73A49">namespace</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Microsoft</span><span style="color: #24292E">.</span><span style="color: #6F42C1">Identity</span><span style="color: #24292E">.</span><span style="color: #6F42C1">Web</span></span>
<span class="line"><span style="color: #24292E">{</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">public</span><span style="color: #24292E"> </span><span style="color: #D73A49">abstract</span><span style="color: #24292E"> </span><span style="color: #D73A49">class</span><span style="color: #24292E"> </span><span style="color: #6F42C1">MicrosoftIdentityBaseAuthenticationBuilder</span></span>
<span class="line"><span style="color: #24292E">    {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6A737D">// ...</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">internal</span><span style="color: #24292E"> </span><span style="color: #D73A49">static</span><span style="color: #24292E"> </span><span style="color: #D73A49">void</span><span style="color: #24292E"> </span><span style="color: #6F42C1">SetIdentityModelLogger</span><span style="color: #24292E">(</span><span style="color: #6F42C1">IServiceProvider</span><span style="color: #24292E"> </span><span style="color: #6F42C1">serviceProvider</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">        {</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">if</span><span style="color: #24292E"> (serviceProvider </span><span style="color: #D73A49">!=</span><span style="color: #24292E"> </span><span style="color: #005CC5">null</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">            {</span></span>
<span class="line"><span style="color: #24292E">                </span><span style="color: #6A737D">// initialize logger only once</span></span>
<span class="line"><span style="color: #24292E">                </span><span style="color: #D73A49">if</span><span style="color: #24292E"> (LogHelper.Logger </span><span style="color: #D73A49">!=</span><span style="color: #24292E"> NullIdentityModelLogger.Instance)</span></span>
<span class="line"><span style="color: #24292E">                    </span><span style="color: #D73A49">return</span><span style="color: #24292E">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">                </span><span style="color: #6A737D">// check if an ILogger was already created by user</span></span>
<span class="line"><span style="color: #24292E">                </span><span style="color: #6F42C1">ILogger</span><span style="color: #24292E">? </span><span style="color: #6F42C1">logger</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> serviceProvider.</span><span style="color: #6F42C1">GetService</span><span style="color: #24292E">&#x3C;</span><span style="color: #6F42C1">ILogger</span><span style="color: #24292E">&#x3C;</span><span style="color: #6F42C1">IdentityLoggerAdapter</span><span style="color: #24292E">>>();</span></span>
<span class="line"><span style="color: #24292E">                </span><span style="color: #D73A49">if</span><span style="color: #24292E"> (logger </span><span style="color: #D73A49">==</span><span style="color: #24292E"> </span><span style="color: #005CC5">null</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">                {</span></span>
<span class="line"><span style="color: #24292E">                    </span><span style="color: #D73A49">var</span><span style="color: #24292E"> </span><span style="color: #6F42C1">loggerFactory</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> serviceProvider.</span><span style="color: #6F42C1">GetService</span><span style="color: #24292E">&#x3C;</span><span style="color: #6F42C1">ILoggerFactory</span><span style="color: #24292E">>();</span></span>
<span class="line"><span style="color: #24292E">                    </span><span style="color: #D73A49">if</span><span style="color: #24292E"> (loggerFactory </span><span style="color: #D73A49">!=</span><span style="color: #24292E"> </span><span style="color: #005CC5">null</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">                        logger </span><span style="color: #D73A49">=</span><span style="color: #24292E"> loggerFactory.</span><span style="color: #6F42C1">CreateLogger</span><span style="color: #24292E">&#x3C;</span><span style="color: #6F42C1">IdentityLoggerAdapter</span><span style="color: #24292E">>();</span></span>
<span class="line"><span style="color: #24292E">                }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">                </span><span style="color: #6A737D">// return if user hasn't configured any logging</span></span>
<span class="line"><span style="color: #24292E">                </span><span style="color: #D73A49">if</span><span style="color: #24292E"> (logger </span><span style="color: #D73A49">==</span><span style="color: #24292E"> </span><span style="color: #005CC5">null</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">                    </span><span style="color: #D73A49">return</span><span style="color: #24292E">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">                </span><span style="color: #6A737D">// initialize Wilson logger</span></span>
<span class="line"><span style="color: #24292E">                </span><span style="color: #6F42C1">IIdentityLogger</span><span style="color: #24292E"> </span><span style="color: #6F42C1">identityLogger</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #D73A49">new</span><span style="color: #24292E"> </span><span style="color: #6F42C1">IdentityLoggerAdapter</span><span style="color: #24292E">(logger);</span></span>
<span class="line"><span style="color: #24292E">                LogHelper.Logger </span><span style="color: #D73A49">=</span><span style="color: #24292E"> identityLogger;</span></span>
<span class="line"><span style="color: #24292E">            }</span></span>
<span class="line"><span style="color: #24292E">        }</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6A737D">// ...</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre><pre data-language="csharp" data-theme="dark"><code data-language="csharp" data-theme="dark"><span class="line"><span style="color: #6A737D">// Microsoft.Identity.Web.dll</span></span>
<span class="line"><span style="color: #F97583">namespace</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">Microsoft</span><span style="color: #E1E4E8">.</span><span style="color: #B392F0">Identity</span><span style="color: #E1E4E8">.</span><span style="color: #B392F0">Web</span></span>
<span class="line"><span style="color: #E1E4E8">{</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">public</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">abstract</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">class</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">MicrosoftIdentityBaseAuthenticationBuilder</span></span>
<span class="line"><span style="color: #E1E4E8">    {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #6A737D">// ...</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">internal</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">static</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">void</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">SetIdentityModelLogger</span><span style="color: #E1E4E8">(</span><span style="color: #B392F0">IServiceProvider</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">serviceProvider</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">        {</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> (serviceProvider </span><span style="color: #F97583">!=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">null</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">            {</span></span>
<span class="line"><span style="color: #E1E4E8">                </span><span style="color: #6A737D">// initialize logger only once</span></span>
<span class="line"><span style="color: #E1E4E8">                </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> (LogHelper.Logger </span><span style="color: #F97583">!=</span><span style="color: #E1E4E8"> NullIdentityModelLogger.Instance)</span></span>
<span class="line"><span style="color: #E1E4E8">                    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">                </span><span style="color: #6A737D">// check if an ILogger was already created by user</span></span>
<span class="line"><span style="color: #E1E4E8">                </span><span style="color: #B392F0">ILogger</span><span style="color: #E1E4E8">? </span><span style="color: #B392F0">logger</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> serviceProvider.</span><span style="color: #B392F0">GetService</span><span style="color: #E1E4E8">&#x3C;</span><span style="color: #B392F0">ILogger</span><span style="color: #E1E4E8">&#x3C;</span><span style="color: #B392F0">IdentityLoggerAdapter</span><span style="color: #E1E4E8">>>();</span></span>
<span class="line"><span style="color: #E1E4E8">                </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> (logger </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">null</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">                {</span></span>
<span class="line"><span style="color: #E1E4E8">                    </span><span style="color: #F97583">var</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">loggerFactory</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> serviceProvider.</span><span style="color: #B392F0">GetService</span><span style="color: #E1E4E8">&#x3C;</span><span style="color: #B392F0">ILoggerFactory</span><span style="color: #E1E4E8">>();</span></span>
<span class="line"><span style="color: #E1E4E8">                    </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> (loggerFactory </span><span style="color: #F97583">!=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">null</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">                        logger </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> loggerFactory.</span><span style="color: #B392F0">CreateLogger</span><span style="color: #E1E4E8">&#x3C;</span><span style="color: #B392F0">IdentityLoggerAdapter</span><span style="color: #E1E4E8">>();</span></span>
<span class="line"><span style="color: #E1E4E8">                }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">                </span><span style="color: #6A737D">// return if user hasn't configured any logging</span></span>
<span class="line"><span style="color: #E1E4E8">                </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> (logger </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">null</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">                    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">                </span><span style="color: #6A737D">// initialize Wilson logger</span></span>
<span class="line"><span style="color: #E1E4E8">                </span><span style="color: #B392F0">IIdentityLogger</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">identityLogger</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">new</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">IdentityLoggerAdapter</span><span style="color: #E1E4E8">(logger);</span></span>
<span class="line"><span style="color: #E1E4E8">                LogHelper.Logger </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> identityLogger;</span></span>
<span class="line"><span style="color: #E1E4E8">            }</span></span>
<span class="line"><span style="color: #E1E4E8">        }</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #6A737D">// ...</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre></div>
<p>So they have clearly left us an escape hatch: To downgrade <code>System.Identity</code> log entries from <code>error</code> to <code>warning</code>, we can implement a custom <code>ILogger</code> and register it as singleton <code>ILogger&#x3C;IdentityLoggerAdapter></code>!</p>
<h2 id="solution"><a href="#solution">Solution</a></h2>
<p>We implement a logger that works otherwise exactly like the standard one, except that it should perform the downgrade. We can simply wrap an instance of the standard logger:</p>
<div data-rehype-pretty-code-fragment=""><pre data-language="csharp" data-theme="light"><code data-language="csharp" data-theme="light"><span class="line"><span style="color: #6A737D">// CustomIdentityLogger.cs</span></span>
<span class="line"><span style="color: #D73A49">public</span><span style="color: #24292E"> </span><span style="color: #D73A49">class</span><span style="color: #24292E"> </span><span style="color: #6F42C1">CustomIdentityLogger</span><span style="color: #24292E"> : </span><span style="color: #6F42C1">ILogger</span><span style="color: #24292E">&#x3C;</span><span style="color: #6F42C1">IdentityLoggerAdapter</span><span style="color: #24292E">></span></span>
<span class="line"><span style="color: #24292E">{</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">private</span><span style="color: #24292E"> </span><span style="color: #6F42C1">ILogger</span><span style="color: #24292E">&#x3C;</span><span style="color: #6F42C1">IdentityLoggerAdapter</span><span style="color: #24292E">> </span><span style="color: #6F42C1">logger</span><span style="color: #24292E">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">public</span><span style="color: #24292E"> </span><span style="color: #6F42C1">CustomIdentityLogger</span><span style="color: #24292E">(</span><span style="color: #6F42C1">ILoggerFactory</span><span style="color: #24292E"> </span><span style="color: #6F42C1">loggerFactory</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">    {</span></span>
<span class="line"><span style="color: #24292E">        logger </span><span style="color: #D73A49">=</span><span style="color: #24292E"> loggerFactory.</span><span style="color: #6F42C1">CreateLogger</span><span style="color: #24292E">&#x3C;</span><span style="color: #6F42C1">IdentityLoggerAdapter</span><span style="color: #24292E">>();</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">public</span><span style="color: #24292E"> </span><span style="color: #6F42C1">IDisposable</span><span style="color: #24292E"> </span><span style="color: #6F42C1">BeginScope</span><span style="color: #24292E">&#x3C;</span><span style="color: #6F42C1">TState</span><span style="color: #24292E">>(</span><span style="color: #6F42C1">TState</span><span style="color: #24292E"> </span><span style="color: #6F42C1">state</span><span style="color: #24292E">) </span><span style="color: #D73A49">=></span><span style="color: #24292E"> logger.</span><span style="color: #6F42C1">BeginScope</span><span style="color: #24292E">(state);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">public</span><span style="color: #24292E"> </span><span style="color: #D73A49">bool</span><span style="color: #24292E"> </span><span style="color: #6F42C1">IsEnabled</span><span style="color: #24292E">(</span><span style="color: #6F42C1">LogLevel</span><span style="color: #24292E"> </span><span style="color: #6F42C1">logLevel</span><span style="color: #24292E">) </span><span style="color: #D73A49">=></span><span style="color: #24292E"> logger.</span><span style="color: #6F42C1">IsEnabled</span><span style="color: #24292E">(logLevel);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">public</span><span style="color: #24292E"> </span><span style="color: #D73A49">void</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Log</span><span style="color: #24292E">&#x3C;</span><span style="color: #6F42C1">TState</span><span style="color: #24292E">>(</span><span style="color: #6F42C1">LogLevel</span><span style="color: #24292E"> </span><span style="color: #6F42C1">logLevel</span><span style="color: #24292E">, </span><span style="color: #6F42C1">EventId</span><span style="color: #24292E"> </span><span style="color: #6F42C1">eventId</span><span style="color: #24292E">, </span><span style="color: #6F42C1">TState</span><span style="color: #24292E"> </span><span style="color: #6F42C1">state</span><span style="color: #24292E">, </span><span style="color: #6F42C1">Exception</span><span style="color: #24292E"> </span><span style="color: #6F42C1">exception</span><span style="color: #24292E">, </span><span style="color: #6F42C1">Func</span><span style="color: #24292E">&#x3C;</span><span style="color: #6F42C1">TState</span><span style="color: #24292E">, </span><span style="color: #6F42C1">Exception</span><span style="color: #24292E">, </span><span style="color: #D73A49">string</span><span style="color: #24292E">> </span><span style="color: #6F42C1">formatter</span><span style="color: #24292E">)</span></span>
<span class="line"><span style="color: #24292E">    {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">if</span><span style="color: #24292E"> (logLevel </span><span style="color: #D73A49">==</span><span style="color: #24292E"> LogLevel.Error)</span></span>
<span class="line"><span style="color: #24292E">            logLevel </span><span style="color: #D73A49">=</span><span style="color: #24292E"> LogLevel.Warning;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">        logger.</span><span style="color: #6F42C1">Log</span><span style="color: #24292E">(logLevel, eventId, state, exception, formatter);</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre><pre data-language="csharp" data-theme="dark"><code data-language="csharp" data-theme="dark"><span class="line"><span style="color: #6A737D">// CustomIdentityLogger.cs</span></span>
<span class="line"><span style="color: #F97583">public</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">class</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">CustomIdentityLogger</span><span style="color: #E1E4E8"> : </span><span style="color: #B392F0">ILogger</span><span style="color: #E1E4E8">&#x3C;</span><span style="color: #B392F0">IdentityLoggerAdapter</span><span style="color: #E1E4E8">></span></span>
<span class="line"><span style="color: #E1E4E8">{</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">private</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">ILogger</span><span style="color: #E1E4E8">&#x3C;</span><span style="color: #B392F0">IdentityLoggerAdapter</span><span style="color: #E1E4E8">> </span><span style="color: #B392F0">logger</span><span style="color: #E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">public</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">CustomIdentityLogger</span><span style="color: #E1E4E8">(</span><span style="color: #B392F0">ILoggerFactory</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">loggerFactory</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">    {</span></span>
<span class="line"><span style="color: #E1E4E8">        logger </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> loggerFactory.</span><span style="color: #B392F0">CreateLogger</span><span style="color: #E1E4E8">&#x3C;</span><span style="color: #B392F0">IdentityLoggerAdapter</span><span style="color: #E1E4E8">>();</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">public</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">IDisposable</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">BeginScope</span><span style="color: #E1E4E8">&#x3C;</span><span style="color: #B392F0">TState</span><span style="color: #E1E4E8">>(</span><span style="color: #B392F0">TState</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">state</span><span style="color: #E1E4E8">) </span><span style="color: #F97583">=></span><span style="color: #E1E4E8"> logger.</span><span style="color: #B392F0">BeginScope</span><span style="color: #E1E4E8">(state);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">public</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">bool</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">IsEnabled</span><span style="color: #E1E4E8">(</span><span style="color: #B392F0">LogLevel</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">logLevel</span><span style="color: #E1E4E8">) </span><span style="color: #F97583">=></span><span style="color: #E1E4E8"> logger.</span><span style="color: #B392F0">IsEnabled</span><span style="color: #E1E4E8">(logLevel);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">public</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">void</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">Log</span><span style="color: #E1E4E8">&#x3C;</span><span style="color: #B392F0">TState</span><span style="color: #E1E4E8">>(</span><span style="color: #B392F0">LogLevel</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">logLevel</span><span style="color: #E1E4E8">, </span><span style="color: #B392F0">EventId</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">eventId</span><span style="color: #E1E4E8">, </span><span style="color: #B392F0">TState</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">state</span><span style="color: #E1E4E8">, </span><span style="color: #B392F0">Exception</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">exception</span><span style="color: #E1E4E8">, </span><span style="color: #B392F0">Func</span><span style="color: #E1E4E8">&#x3C;</span><span style="color: #B392F0">TState</span><span style="color: #E1E4E8">, </span><span style="color: #B392F0">Exception</span><span style="color: #E1E4E8">, </span><span style="color: #F97583">string</span><span style="color: #E1E4E8">> </span><span style="color: #B392F0">formatter</span><span style="color: #E1E4E8">)</span></span>
<span class="line"><span style="color: #E1E4E8">    {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> (logLevel </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> LogLevel.Error)</span></span>
<span class="line"><span style="color: #E1E4E8">            logLevel </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> LogLevel.Warning;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">        logger.</span><span style="color: #B392F0">Log</span><span style="color: #E1E4E8">(logLevel, eventId, state, exception, formatter);</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre></div>
<div data-rehype-pretty-code-fragment=""><pre data-language="csharp" data-theme="light"><code data-language="csharp" data-theme="light"><span class="line"><span style="color: #6A737D">// Program.cs</span></span>
<span class="line"><span style="color: #24292E">builder.Services.</span><span style="color: #6F42C1">AddSingleton</span><span style="color: #24292E">&#x3C;</span><span style="color: #6F42C1">ILogger</span><span style="color: #24292E">&#x3C;</span><span style="color: #6F42C1">IdentityLoggerAdapter</span><span style="color: #24292E">>, </span><span style="color: #6F42C1">CustomIdentityLogger</span><span style="color: #24292E">>();</span></span></code></pre><pre data-language="csharp" data-theme="dark"><code data-language="csharp" data-theme="dark"><span class="line"><span style="color: #6A737D">// Program.cs</span></span>
<span class="line"><span style="color: #E1E4E8">builder.Services.</span><span style="color: #B392F0">AddSingleton</span><span style="color: #E1E4E8">&#x3C;</span><span style="color: #B392F0">ILogger</span><span style="color: #E1E4E8">&#x3C;</span><span style="color: #B392F0">IdentityLoggerAdapter</span><span style="color: #E1E4E8">>, </span><span style="color: #B392F0">CustomIdentityLogger</span><span style="color: #E1E4E8">>();</span></span></code></pre></div>
<p>And voil√†, the severity is downgraded:</p>
<p><code>Microsoft.IdentityModel.LoggingExtensions.IdentityLoggerAdapter: Warning: IDX10634: Unable to create the SignatureProvider. Algorithm: 'HS256', SecurityKey: '[PII of type 'Microsoft.IdentityModel.Tokens.RsaSecurityKey' is hidden. For more details, see https://aka.ms/IdentityModel/PII.]' is not supported. The list of supported algorithms is available here: https://aka.ms/IdentityModel/supported-algorithms</code></p>b:["$","div",null,{"className":"flex justify-center","children":["$","div",null,{"className":"md:px-10 min-w-0 max-w-7xl mb-12","children":["$","article",null,{"children":[["$","header",null,{"className":"px-5 mb-4 py-10 relative","children":[["$","h1",null,{"className":"text-3xl leading-none tracking-tight text-gray-900 md:text-4xl lg:text-5xl dark:text-gray-100","children":"Microsoft.Identity logs Errors without asking"}],["$","time",null,{"dateTime":"2023-08-30 20:22","className":"pl-1 font-serif text-slate-400 bottom-0 absolute","children":[["$","svg",null,{"className":"h-4 w-4 inline-block","width":"24","height":"24","xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":"2","strokeLinecap":"round","strokeLinejoin":"round","children":[["$","path",null,{"d":"M12 19l7-7 3 3-7 7-3-3z"}]," ",["$","path",null,{"d":"M18 13l-1.5-7.5L2 2l3.5 14.5L13 18l5-5z"}]," ",["$","path",null,{"d":"M2 2l7.586 7.586"}]," ",["$","circle",null,{"cx":"11","cy":"11","r":"2"}]]}]," ","2023-08-30 20:22"]}]]}],["$","div",null,{"className":"bg-slate-100 dark:bg-slate-800 p-5 pb-12 rounded shadow-lg","children":[[["$","p",null,{"className":"italic text-slate-400 p-4","dangerouslySetInnerHTML":{"__html":"This article was written based on `Microsoft.Identity.Web` v1.26.0.0."}}],["$","hr",null,{"className":"h-px my-4 bg-gray-200 border-0 dark:bg-gray-700"}]],["$","div",null,{"className":"space-y-4","dangerouslySetInnerHTML":{"__html":"$c"}}]]}]]}]}]}]
a:null
